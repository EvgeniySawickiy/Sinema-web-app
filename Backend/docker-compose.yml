services:
  
  gateway:
    build:
      context: ./ApiGateway
      dockerfile: ApiGateway/Dockerfile
    container_name: gateway
    ports:
      - "7000:7000"
    networks:
      - backend
    depends_on:
      - user-service
      - movie-service
      - booking-service

  user-service:
    build:
      context: ./UserService
      dockerfile: UserService/Dockerfile
    container_name: user-service
    ports:
      - "8090:8080"
    depends_on:
      - user-postgres
    networks:
      - backend
    restart: unless-stopped
    environment:
      Logstash__Uri: "http://logstash:5044"
      ASPNETCORE_ENVIRONMENT: "Development"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__WebApi__Url: "http://user-service:8080"
      Kestrel__Endpoints__Grpc__Protocols: "Http2"
      Kestrel__Endpoints__Grpc__Url: "http://user-service:8085"

  user-postgres:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: userdb
    ports:
      - "5434:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
  
  movie-service:
    build:
      context: ./MovieService
      dockerfile: MovieService/Dockerfile
    container_name: movie-service
    ports:
      - "8082:8080"
    depends_on:
      - movie-postgres
    networks:
      - backend
    restart: unless-stopped
    environment:
      Logstash__Uri: "http://logstash:5044"
      ASPNETCORE_ENVIRONMENT: "Development"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__WebApi__Url: "http://movie-service:8080"
      Kestrel__Endpoints__Grpc__Protocols: "Http2"
      Kestrel__Endpoints__Grpc__Url: "http://movie-service:8085"
  
  movie-postgres:
    image: postgres:15
    container_name: movie-db
    environment:
      Logstash__Uri: "http://logstash:5044"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: moviedb
    ports:
      - "5432:5432"
    volumes:
      - movie_db_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
  
  booking-service:
    build:
      context: ./BookingService
      dockerfile: BookingService/Dockerfile
    container_name: booking-service
    ports:
      - "8070:8080"
    depends_on:
      - redis
      - mongo-booking
      - hangfire-postgres
    environment:
      Logstash__Uri: "http://logstash:5044"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__WebApi__Url: "http://booking-service:8080"
      Kestrel__Endpoints__Grpc__Protocols: "Http2"
      Kestrel__Endpoints__Grpc__Url: "http://booking-service:8085"
    networks:
      - backend
    restart: unless-stopped
  
  notification-service:
    build:
      context: ./NotificationService
      dockerfile: NotificationService/Dockerfile
    container_name: notification-service
    ports:
      - "8060:8080"
    depends_on:
      - mongo-booking
      - rabbitmq
    environment:
      Logstash__Uri: "http://logstash:5044"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__WebApi__Url: "http://notification-service:8080"
      Kestrel__Endpoints__Grpc__Protocols: "Http2"
      Kestrel__Endpoints__Grpc__Url: "http://notification-service:8085"
    networks:
      - backend
    restart: unless-stopped
    
  hangfire-postgres:
      image: postgres:15
      container_name: postgres_hangfire
      restart: always
      environment:
        POSTGRES_DB: hangfiredb
        POSTGRES_USER: hangfire_user
        POSTGRES_PASSWORD: hangfire_pass
      ports:
        - "5436:5432"
      networks:
        - backend
      volumes:
        - postgres_data:/var/lib/postgresql/data
  
  mongo-booking:
    image: mongo:latest
    container_name: mongo-booking
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    restart: unless-stopped
  
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
  
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq_container
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    restart: unless-stopped
  
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.16.2
    ports:
      - 9200:9200
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - backend

  logstash:
    image: logstash:8.17.0
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - 9600:9600
    depends_on:
      - elasticsearch
    networks:
        - backend

  kibana:
    container_name: kibana
    image: kibana:8.14.3
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - backend

volumes:
  user_db_data:
  movie_db_data:
  mongo_data:
  redis_data:
  elasticsearch_data:
  postgres_data:

networks:
  backend:
